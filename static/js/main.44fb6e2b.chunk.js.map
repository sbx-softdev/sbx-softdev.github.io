{"version":3,"sources":["views/Terminal.jsx","App.jsx","serviceWorker.js","index.js"],"names":["COMMANDS","_getCommand","input","split","_getParameters","_array","slice","length","join","Cli","props","react_default","a","createElement","id","cmd","executed","className","Output","indexOf","OutputEcho","text","OutputHelp","OutputSbx","includes","OutputParameterError","parameters","OutputCommandError","Terminal","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","history","parser","bind","assertThisInitialized","setState","document","addEventListener","removeEventListener","e","key","concat","toConsumableArray","test","replace","map","i","Fragment","React","Component","App","Terminal_Terminal","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44fb6e2b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst COMMANDS = [\"clear\", \"echo\", \"help\", \"sbx\"];\n\nfunction _getCommand(input) {\n    let _array = input.split(\" \");\n    return _array[0];\n}\n\nfunction _getParameters(input) {\n    let _array = input.split(\" \");\n    return _array.slice(1, _array.length).join(\" \");\n}\n\nfunction Cli(props) {\n    return (\n        <dt id={props.id}>\n            <div>\n                > {props.cmd}\n                {!props.executed && <span className=\"_blink\" />}\n            </div>\n        </dt>\n    );\n}\n\nfunction Output(props) {\n    if (props.cmd.indexOf(\"echo\") === 0) {\n        return <OutputEcho text={_getParameters(props.cmd)} />;\n    }\n    if (props.cmd === \"help\") {\n        return <OutputHelp />;\n    }\n    if (props.cmd === \"sbx\") {\n        return <OutputSbx />;\n    }\n    if (COMMANDS.includes(_getCommand(props.cmd)) && _getParameters(props.cmd)) {\n        return <OutputParameterError cmd={_getCommand(props.cmd)} parameters={_getParameters(props.cmd)} />;\n    }\n    return <OutputCommandError cmd={_getCommand(props.cmd)} />;\n}\n\nfunction OutputCommandError(props) {\n    return (\n        <dd>\n            <div>\n                |{\" \"}\n                <span className=\"fg-err\">\n                    {props.cmd} : command '{props.cmd}' is not recognized\n                </span>\n            </div>\n            <div>&nbsp;</div>\n        </dd>\n    );\n}\n\nfunction OutputParameterError(props) {\n    return (\n        <dd>\n            <div>\n                |{\" \"}\n                <span className=\"fg-err\">\n                    {props.cmd} : parameters '{props.parameters}' are not recognized\n                </span>\n            </div>\n            <div>&nbsp;</div>\n        </dd>\n    );\n}\n\nfunction OutputEcho(props) {\n    return (\n        <dd>\n            <div>| {props.text}</div>\n            <div>&nbsp;</div>\n        </dd>\n    );\n}\n\nfunction OutputHelp(props) {\n    return (\n        <dd>\n            <div>| {COMMANDS.join(\" \")}</div>\n            <div>&nbsp;</div>\n        </dd>\n    );\n}\n\nfunction OutputSbx(props) {\n    return (\n        <dd>\n            <div>\n                | <strong className=\"fg-pink\"># software developer</strong>\n            </div>\n            <div>| - javascript, python, c#, sql, t-sql, powershell, bash</div>\n            <div>| - web, nodejs, dotnet, sqlite, ssms, windows, linux</div>\n            <div>| - blockchain ( ethereum, stellar )</div>\n            <div>|</div>\n            <div>\n                | <span className=\"fg-blue\">contact: sbx [dot] softdev [at] gmail [dot] com</span>\n            </div>\n            <div>&nbsp;</div>\n        </dd>\n    );\n}\n\nexport default class Terminal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\",\n            history: []\n        };\n\n        this.parser = this.parser.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({history: [\"sbx\"]});\n        document.addEventListener(\"keydown\", this.parser);\n    }\n\n    componentDidUpdate() {\n        //document.getElementById(\"_active\").scrollIntoView();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.parser);\n    }\n\n    parser(e) {\n        if (e.key === \"Backspace\") {\n            this.setState({input: this.state.input.slice(0, this.state.input.length - 1)});\n        } else if (e.key === \"Enter\") {\n            if (this.state.input === \"clear\") {\n                this.setState({\n                    input: \"\",\n                    history: []\n                });\n            } else {\n                this.setState({\n                    input: \"\",\n                    history: [...this.state.history, this.state.input]\n                });\n            }\n        } else if (/^[a-zA-Z\\s-]$/.test(e.key)) {\n            let input = this.state.input.concat(e.key).replace(/\\s+/g, \" \");\n            this.setState({input});\n        }\n    }\n\n    render() {\n        return (\n            <section className=\"fit view view-terminal\">\n                <article className=\"fit\">\n                    <dl>\n                        {this.state.history.map((cmd, i) => (\n                            <React.Fragment key={i}>\n                                <Cli cmd={cmd} executed />\n                                <Output cmd={cmd} />\n                            </React.Fragment>\n                        ))}\n                        <Cli id={\"_active\"} cmd={this.state.input} />\n                    </dl>\n                </article>\n            </section>\n        );\n    }\n}\n","import React from \"react\";\n\nimport Terminal from \"./views/Terminal\";\n\nexport default class App extends React.Component {\n    render() {\n        return (\n            <main className=\"app fit text-not-selectable\">\n                <div className=\"fit\">\n                    <Terminal />\n                </div>\n            </main>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./scss/index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}